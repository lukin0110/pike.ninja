(function() {

	$("#bt_switch_video, #bt_switch_image").show();
	$("#canvas_tracking, #canvas_tracking_image").show();
	$("#bt_switch_video").click(function(event) {
		switchVideo();
	});
	$("#bt_switch_image").click(function(event) {
		switchImage();
	});

	var tracking_data = [
		[243.625,172.75,249.014,171.041,252.918,169.895,256.875,169.5,260.582,170.677,264.062,172.501,267.375,174,268.868,173.933,270.329,173.625,271.696,173.023,272.728,171.991,273.631,170.833,274.725,169.861,276.493,168.666,278.242,167.447,280.047,166.308,281.684,165.481,283.398,164.828,285.178,164.386,285.242,164.544,285.077,164.945,286.511,165.11,287.957,165.213,290.289,165.823,292.642,166.339,294.134,166.14,294.689,166.777,295.225,167.43,295.261,168.23,294.068,169.033,292.875,169.5,291.296,168.662,288.754,168.264,288.774,168.86,288.575,169.018,288.591,169.223,288.375,169,288.189,168.834,287.994,168.68,287.769,168.579,287.303,168.775,287.62,168.882,288.356,168.823,289.092,168.759,291.332,168.495,293.576,168.263,295.816,168.006,298.041,167.648,299.159,167.344,300.194,166.835,300.288,165.832,299.379,165.122,298.827,164.646,298.697,163.928,298.263,163.342,297.693,162.877,295.982,161.783,294.206,160.798,292.374,159.925,290.456,159.264,288.448,158.884,286.415,158.673,284.374,158.588,282.331,158.528,280.289,158.424,276.627,158.1,272.978,157.663,269.375,157,266.563,156.507,263.672,156.415,262.015,156.486,260.387,156.804,260.021,157.552,260.563,158.443,261.107,158.558,261.935,158.501,262.762,158.569,264.506,159.141,266.125,160,267.747,160.594,269.39,161.151,271.026,161.725,272.658,162.317,275.184,163.18,277.706,164.056,280.177,165.063,282.503,166.364,284.209,168.207,285.709,170.233,286.857,171.75,287.929,173.322,288.945,174.93,289.937,176.552,290.937,178.17,291.976,179.765,292.56,181.571,292.726,183.562,292.174,186.115,291.623,188.668,291.363,191.261,291.253,193.713,291.438,196.149,292.06,199.055,294.125,201.75,296.2,202.161,297.651,203.64,298.641,205.978,298.478,208.767,297.875,211.5,297.761,211.001,298.427,209.319,299.126,207.653,301.094,205.276,304.456,197.347,306.151,192.646,307.743,187.91,309.279,183.155,310.918,179.527,312.656,171.292,313.182,167.023,313.409,162.73,312.927,159.195,312.298,153.515,311.51,147.854,310.489,144.012,309.251,140.23,308.443,136.26,307.875,132.25,307.875,126.625,307.63,124.593,308.426,122.74,310.881,121.612,313.5,120.875,318.809,119.843,322.648,119.787,326.488,119.717,329.499,119.461,332.51,119.21,338.523,118.992,340.992,118.73,343.461,118.466,345.68,118.418,347.901,118.451,349.252,118.177,350.368,118.201,351,118.625,350.75,119.125,350.75,119.125,351.25,120.875,349.98,121.119,348.787,121.661,347.756,122.472,346.03,124.982,344.5,127.625,343.162,130.075,342.389,132.772,341.958,135.329,341.678,137.907,340.75,143.875,341.59,146.975,342.023,150.157,342.077,152.848,342.02,155.537,342.025,158.727,342.336,161.899,342.919,163.203,343.752,164.373,344.309,165.488,344.812,166.149,345.5,166.375,345.27,167.11,344.918,167.793,344.575,168.068,344.131,168.147,343.045,168.539,341.914,168.691,340.755,168.165,339.75,167.375,337.481,166.171,335.207,164.974,333.566,164.005,331.722,163.483,329.888,162.926,327.783,161.933,325.651,161.01,324.206,160.752,322.75,160.875],
		[480,124.625,482.513,132.842,486.225,137.965,487.75,140.875,489.837,142.545,491.399,142.468,493.25,140.125,491.895,138.241,491.887,135.815,491.751,133.396,490.918,131.422,489.8,129.584,488.848,127.656,487.809,125.598,486.443,123.737,484.987,121.944,482.793,119.171,480.414,116.559,477.549,114.516,471.684,114.026,465.757,114.382,461.496,113.437,457.302,112.181,452.435,111.225,447.716,109.719,443.851,107.187,437.406,106.515,430.959,105.876,424.513,105.213,418.081,104.44,411.75,103.125,404.781,102.766,397.771,103.295,393.24,103.733,389.891,104.078,386.627,104.869,387,104.625,392.286,105.123,397.613,105.538,402.945,105.869,406.886,105.786,410.828,105.762,419.828,106.365,428.831,106.916,437.481,107.257,446.128,107.679,454.776,108.084,463.428,108.378,470.312,108.486,477.196,108.597,484.069,108.975,490.847,110.136,495.591,110.92,500.373,111.466,505.143,112.086,509.839,113.105,512.431,114.195,514.698,115.846,516.184,118.21,516.664,120.974,516.769,123.267,516.566,125.55,515.797,127.705,514.411,129.523,512.606,130.934,508.897,132.748,505.037,134.226,502.5,136.125,497.004,138.075,493.035,139.31,489.071,140.422,485.114,141.581,480.993,143.047,476.955,144.753,473.2,146.195,469.768,148.286,466.617,150.791,462.302,154.127,457.75,157.125,455.665,159.202,454.304,161.857,453.172,164.62,452.128,167.418,450.638,171.522,449.184,175.639,447.81,179.783,446.6,183.977,446.132,187.968,445.76,191.973,445.441,194.412,445.335,196.871,445.045,199.313,444.216,202.272,443.334,205.215,442.74,208.226,442.462,210.736,441.924,213.2,440.92,216.471,440.031,219.774,439.746,223.17,439.564,225.589,439.8,227.956,442.141,231.185,444,234.625,445.535,236.41,447.851,237.432,449.624,239.572,449.739,241.753,449.75,243.875,448.992,243.398,449.908,241.032,451.009,238.744,454.058,236.678,458.057,228.081,461.119,222.42,464.25,216.796,467.367,211.163,471.093,204.873,475.525,195.433,477.761,189.633,479.942,183.811,481.91,179.406,484.46,171.281,486.795,163.09,487.866,159.671,488.887,156.239,488.857,153.527,489.25,150.875,486.125,148.625,484.478,148.86,482.93,149.542,481.628,150.425,480.375,151.375,476.902,154.276,475.76,156.508,473.967,158.227,471.477,159.566,468.771,160.374,463.885,160.982,460.787,161.896,457.628,162.573,454.435,162.816,451.231,163.486,444.591,164.078,441.311,164.663,438.125,165.625,435.125,166.125,435.125,166.125,429.625,172.375,428.317,174.98,427.624,178.18,427.333,181.442,427.717,186.796,428.375,192.125,429.912,196.617,432.367,200.725,434.762,204.693,437.276,208.584,443.125,215.875,446.565,219.466,450.526,222.487,453.912,224.644,457.547,226.353,463.375,228.566,469.389,230.181,473.805,230.305,478.163,229.519,482.457,228.998,489.614,227.329,496.875,226.375,500.94,225.371,504.668,223.224,511.111,220.202,517.438,216.954,520.633,214.714,523.772,212.396,526.887,210.046,530.125,207.875,532.71,203.503,534.526,198.692,536.283,195.175,536.811,192.395,537.212,189.592,538.243,185.511,539.219,181.417,539.618,178.511,540.125,175.625],
		[270.75,375.5,267.031,372.295,263.691,370.779,262,370,263.661,370.537,265.567,370.801,268,371.75,269.329,371.081,270.493,370.162,271.301,368.922,271.513,367.477,271.417,366.009,271.43,364.54,272.012,362.835,272.76,361.19,273.191,359.45,272.858,358.215,272.171,357.128,271.952,355.989,273.181,356,274.353,356.543,274.814,356.598,275.293,356.601,276.818,356.324,278.323,355.915,279.437,356.329,280.76,356.856,282.144,357.23,283.335,357.944,282.684,359.322,281.5,360.25,281.236,360.572,280.569,361.474,280.631,361.694,280.966,362.172,281.32,362.636,281,363,281.447,362.949,281.896,362.871,282.351,362.82,283.081,362.667,283.817,362.554,285.614,363.071,287.422,363.543,289.766,363.48,292.111,363.4,294.454,363.299,296.795,363.152,297.948,363.039,299.096,362.886,300.23,362.649,300.94,361.993,301.349,361.459,301.481,360.807,300.958,360.32,300.324,359.977,298.264,359.225,296.165,358.592,294.045,358.033,291.894,357.614,290.299,357.442,288.7,357.308,287.099,357.251,285.499,357.295,283.902,357.444,281.506,357.815,279.127,358.278,276.75,358.75,275.611,357.824,275.731,359.321,276.157,359.865,276.949,359.906,278.835,359.48,280.723,359.063,283.606,358.78,286.479,358.405,289.35,358.016,294.299,357.377,299.25,356.75,302.236,355.402,304.862,353.414,307.26,351.154,309.491,348.729,312.769,344.413,315.848,339.951,318.986,335.53,322.482,331.394,325.133,329.087,327.914,326.939,329.886,325.61,331.916,324.372,333.967,323.169,336.079,321.808,338.024,320.218,339.744,318.386,340.711,317.115,341.476,315.713,342.419,313.575,343.224,311.379,343.923,309.147,344.35,307.387,344.806,305.635,345.737,303.719,347,302,348.139,300.944,349.4,300.037,350.128,301.022,349.853,300.816,349,301.25,349.213,300.508,349.026,299.758,348.409,299.297,348.084,299.257,347.623,299.042,346.747,299.714,345.981,300.536,345.128,301.27,343.234,302.419,341.177,303.224,338.786,303.854,336.439,304.66,334.107,304.807,330.479,305.843,326.773,306.497,324.366,305.675,322.181,304.316,319.898,303.443,317.5,303,316.25,302.75,317.22,303.564,317.898,305.274,319.492,307.028,321.125,308.75,325.944,312.033,328.733,313.051,331.609,313.824,334.734,314.645,337.94,315.042,342.659,315.248,345.171,315.085,347.644,314.594,349.561,314.828,351.921,313.372,355.193,312.242,356.604,311.544,358.125,311.25,359.375,310,359.375,310,363.125,307.25,363.715,305.477,363.621,304.016,363.409,302.564,363.183,301.397,362.875,300.25,362.473,299.072,361.968,297.934,361.684,297.767,361.642,298.123,361.875,299.75,362.01,301.358,361.389,302.863,360.599,304.002,359.586,304.951,357.556,306.613,355.545,308.3,354.152,309.544,352.67,310.679,350.688,312.013,347.51,313.722,344.375,315.5,341.577,316.75,338.705,317.876,334.477,320.024,330.2,322.066,326.944,323.273,323.67,324.427,319.638,325.81,315.625,327.25,310.537,328.333,305.429,329.333,301.587,330.5,299.046,331.945,296.635,333.604,293.833,335.43,291.095,337.348,289.188,338.912,287.125,340.25],
		[513,350.5,508.454,356.381,506.131,360.907,504.75,363.25,507.139,364.928,506.759,365.479,509,365,507.514,364.937,507.37,363.634,506.899,362.406,504.055,363.009,501.228,363.799,498.312,363.968,495.266,363.197,492.197,362.52,489.075,362.15,483.472,361.91,477.863,361.903,472.258,362.109,465.94,363.729,459.744,365.825,452.568,367.325,445.35,368.616,438.997,369.284,432.605,369.485,426.616,370.767,420.524,371.521,414.385,371.741,408.253,372.073,403.082,373.251,398,374.75,391.734,376.806,385.604,379.28,381.478,380.106,378.587,381.811,376.629,384.467,379,384.25,386.333,383.964,393.676,383.567,401.02,383.152,406.518,383.153,412.015,383.016,421.946,382.288,431.871,381.485,441.599,380.288,451.286,378.791,460.961,377.213,470.65,375.727,479.032,374.615,487.421,373.561,495.79,372.364,504.062,370.634,509.492,368.326,514.699,365.543,519.797,362.562,524.77,359.379,526.805,357.909,528.732,356.298,530.371,354.403,531.494,352.159,532.221,350.889,532.823,349.558,532.401,348.313,530.985,347.967,529.529,347.827,526.238,347.593,522.953,347.29,521.75,346.25,518.584,343.824,514.537,342.332,512.786,340.406,510.906,338.553,509.034,336.401,507.405,334.096,505.58,333.181,503.992,331.892,502.462,330.536,501.237,329.968,500,329.5,499.599,328.794,499.917,328.036,500.539,327.477,501.264,327.056,501.738,326.82,502.247,326.685,502.777,326.687,503.304,326.735,504.245,326.712,505.15,326.921,505.767,327.203,506.408,327.427,506.988,327.777,507.794,328.489,508.614,329.182,509.594,329.571,509.975,329.347,509.96,328.829,510.767,327.963,511.735,327.271,512.782,326.709,514.024,326.219,515.342,325.983,518.17,325.611,521,325.25,523.218,325.552,525.41,326.05,526.08,326.315,526.418,326.181,526.25,326,526.902,325.711,527.331,325.096,527.671,324.428,527.79,323.207,528.542,321.029,529.227,320.067,529.921,319.111,530.699,318.226,531.731,317.364,532.047,316.173,530.884,314.89,529.539,313.781,528.87,312.731,527.281,311.082,525.501,309.659,523.747,308.579,521.894,307.707,519.556,307.57,517.25,307.5,509.875,308,506.32,308.998,502.933,310.474,499.488,312.545,496.125,314.75,491.345,316.462,487.949,317.873,484.419,318.895,481.694,319.652,478.895,320.003,472.366,319.555,469.022,319.462,465.699,319.065,461.401,318.482,458.113,317.839,452.635,316.805,450.507,316.583,448.375,316.75,446.875,317,446.875,317,443.875,318.75,444.208,320.125,445.373,322.51,446.681,324.816,449.376,328.677,452.125,332.5,454.953,335.114,458.067,337.411,462.849,340.506,467.619,343.62,473.875,349,478.273,351.68,482.89,353.964,486.574,355.899,490.36,357.62,496.431,359.479,502.543,361.2,505.832,362.116,509.166,362.852,513.299,363.714,517.982,364.237,522.625,365,525.268,365.309,527.94,365.281,531.12,365.332,534.298,365.48,535.749,365.221,537.189,364.895,536.935,365.605,536.625,366.25,535.462,366.07,533.834,366.304,532.971,367.031,531.476,367.518,530.015,368.095,528.32,369.198,526.658,370.35,525.286,371.211,523.875,372]
	];

	var contextVideo,
		context,
		canvasVideo,
		canvas,
		video,
		image,
		points,
		timeOutVideo,
		timeOutImage;
	var frameNumber = 0;
	var imageCount = 0;
	var isBinaryCounter = false;

	var options = {
		wireframe: false,
		subdivisionLimit: 5,
		patchSize: 32
	};

	// utility to seek the videos with dat.gui
	function SeekObject() {}
	SeekObject.prototype = {
		currentTime: 0,
		video: null,
		bindVideo: function(video) {
			if (this.video) this.unbindVideo();
			this.video = video;
			this.ti = setInterval(this.updateCurrentTime.bind(this), 1000/60, this.video);
		},
		unbindVideo: function(video) {
			clearTimeout(this.ti);
			this.video = null;
		},
		updateCurrentTime: function(video) {
			this.currentTime = video.currentTime;
		},
		update: function(value) {
			this.video.currentTime = value
		},
		endUpdate: function(value) {
			this.video.currentTime = value;
			this.video.play();
		}
	};
	var seek = new SeekObject();
	var gui = new dat.GUI();
	var controller = gui.add(seek, 'currentTime', 0, 10).listen();
	controller.onChange(function(value) {
		seek.update(value);
	});
	controller.onFinishChange(function(value) {
		seek.endUpdate(value);
	});

	function switchVideo() {
		$(canvas).unbind('click', clickHandler);
		$(video).unbind('play', playHandler);
		$(canvasVideo).hide();
		$(canvas).hide();
		seek.unbindVideo(video);
		if (video) video.pause();
		if (!canvas || canvas.id == "canvas_tracking_image_counter") {
			isBinaryCounter = false;
			video = $("#video_tracking")[0];
			canvasVideo = $("#canvas_tracking")[0];
			canvas = $("#canvas_tracking_image")[0];
			$("#message").html("Normal tracking");
		}
		else {
			isBinaryCounter = true;
			video = $("#video_tracking_counter")[0];
			canvasVideo = $("#canvas_tracking_counter")[0];
			canvas = $("#canvas_tracking_image_counter")[0];
			$("#message").html("Binary counter tracking");
		}
		contextVideo = canvasVideo.getContext('2d');
		context = canvas.getContext('2d');
		$(canvasVideo).show();
		$(canvas).show();
		video.play();
		seek.bindVideo(video);
		$(video).bind('play', playHandler);
		$(canvas).bind('click', clickHandler);
	}

	function switchImage() {
		image = $("#img" + imageCount)[0];
		if (imageCount++ > 2) imageCount = 0;
		if (points) update();
	}

	function clickHandler(event) {
		if (video.paused) video.play();
		else video.pause();
	}

	function playHandler(event) {
		clearTimeout(timeOutVideo);
		clearTimeout(timeOutImage);
	    drawVideo(video, contextVideo, video.width, video.height);
		drawImage(image, context, video.width, video.height);
	}

	function drawVideo(v, c, w, h) {
	    if(v.paused || v.ended) return false;
	    c.drawImage(v, 0, 0, w, h);
		frameNumber = getFrameNumber(v, c);
		$("#time").html("Time: " + Math.round(video.currentTime*100)/100);
		$("#frame").html("Frame number (time calculation): " + Math.floor(v.currentTime * 25));
		$("#counter").html(isBinaryCounter ? "Frame number (binary counter): " + frameNumber : "");
	    timeOutVideo = setTimeout(drawVideo, 1000/60, v, c, w, h);
	}

	function drawImage(i, ctx, w, h) {
		if(video.paused || video.ended) return false;
		points = [
			[tracking_data[0][frameNumber*2], tracking_data[0][frameNumber*2+1]],
			[tracking_data[1][frameNumber*2], tracking_data[1][frameNumber*2+1]],
			[tracking_data[2][frameNumber*2], tracking_data[2][frameNumber*2+1]],
			[tracking_data[3][frameNumber*2], tracking_data[3][frameNumber*2+1]]
		];
		update();
		timeOutImage = setTimeout(drawImage, 1000/60, i, ctx, w, h);
	}

	function getFrameNumber(v, c) {
		if (!isBinaryCounter) {
			return Math.floor(v.currentTime * 25);
		}
		else {
			var fn = 0; // frame number
			var counterPosition = 640; // x position of the binary counter in the video
			var bitsNumber = 16; // number of bits
			var bitHeight = 16; // the height in pixel of 1 bit
			var i = bitsNumber;
			while (i > 0) {
				--i;
				var value = 0;
				// a bit is 4 pixel large and 16 pixel height
				// to take a pixel in the middle of the bit to avoid video compression problem:
				// 2 is added to the x
				// 8 is added to the y
				var imageData = c.getImageData(640+2, (i * bitHeight) + 8, 1, 1);
				var average = (imageData.data[0] + imageData.data[1] + imageData.data[2]) / 3;
				if (average > 127) {
					// pixel is more white than black
					value = 1;
				}
				fn |= value << i;
			}
			return fn;
		}
	}

	function update() {

		// Reshape canvas.
		canvas.style.left = video.style.left + 'px';
		canvas.style.top = video.style.top + 'px';
		canvas.width = video.width;
		canvas.height = video.height;

		// Measure texture.
		iw = image.width;
		ih = image.height;

		// Set up basic drawing context.
		ctx = canvas.getContext("2d");
		ctx.translate(-video.style.left, -video.style.top);
		ctx.clearRect(video.style.left, video.style.top, video.width, video.height);
		ctx.strokeStyle = "rgb(220,0,100)";

		transform = getProjectiveTransform(points);

		// Begin subdivision process.
		var ptl = transform.transformProjectiveVector([0, 0, 1]);
		var ptr = transform.transformProjectiveVector([1, 0, 1]);
		var pbl = transform.transformProjectiveVector([0, 1, 1]);
		var pbr = transform.transformProjectiveVector([1, 1, 1]);

		ctx.beginPath();
		ctx.moveTo(ptl[0], ptl[1]);
		ctx.lineTo(ptr[0], ptr[1]);
		ctx.lineTo(pbr[0], pbr[1]);
		ctx.lineTo(pbl[0], pbl[1]);
		ctx.closePath();
		ctx.clip();

		divide(0, 0, 1, 1, ptl, ptr, pbl, pbr, options.subdivisionLimit);

		if (options.wireframe) {
			ctx.beginPath();
			ctx.moveTo(ptl[0], ptl[1]);
			ctx.lineTo(ptr[0], ptr[1]);
			ctx.lineTo(pbr[0], pbr[1]);
			ctx.lineTo(pbl[0], pbl[1]);
			ctx.closePath();
			ctx.stroke();
		}
	}

	/**
	 * Render a projective patch.
	 */
	function divide(u1, v1, u4, v4, p1, p2, p3, p4, limit) {
		// See if we can still divide.
		if (limit) {
			// Measure patch non-affinity.
			var d1 = [p2[0] + p3[0] - 2 * p1[0], p2[1] + p3[1] - 2 * p1[1]];
			var d2 = [p2[0] + p3[0] - 2 * p4[0], p2[1] + p3[1] - 2 * p4[1]];
			var d3 = [d1[0] + d2[0], d1[1] + d2[1]];
			var r = Math.abs((d3[0] * d3[0] + d3[1] * d3[1]) / (d1[0] * d2[0] + d1[1] * d2[1]));

			// Measure patch area.
			d1 = [p2[0] - p1[0] + p4[0] - p3[0], p2[1] - p1[1] + p4[1] - p3[1]];
			d2 = [p3[0] - p1[0] + p4[0] - p2[0], p3[1] - p1[1] + p4[1] - p2[1]];
			var area = Math.abs(d1[0] * d2[1] - d1[1] * d2[0]);

			// Check area > patchSize pixels (note factor 4 due to not averaging d1 and d2)
			// The non-affinity measure is used as a correction factor.
			if ((u1 == 0 && u4 == 1) || ((.25 + r * 5) * area > (options.patchSize * options.patchSize))) {
				// Calculate subdivision points (middle, top, bottom, left, right).
				var umid = (u1 + u4) / 2;
				var vmid = (v1 + v4) / 2;
				var pmid = transform.transformProjectiveVector([umid, vmid, 1]);
				var pt = transform.transformProjectiveVector([umid, v1, 1]);
				var pb = transform.transformProjectiveVector([umid, v4, 1]);
				var pl = transform.transformProjectiveVector([u1, vmid, 1]);
				var pr = transform.transformProjectiveVector([u4, vmid, 1]);

				// Subdivide.
				limit--;
				divide(u1, v1, umid, vmid, p1, pt, pl, pmid, limit);
				divide(umid, v1, u4, vmid, pt, p2, pmid, pr, limit);
				divide(u1, vmid, umid, v4, pl, pmid, p3, pb, limit);
				divide(umid, vmid, u4, v4, pmid, pr, pb, p4, limit);

				if (options.wireframe) {
					ctx.beginPath();
					ctx.moveTo(pt[0], pt[1]);
					ctx.lineTo(pb[0], pb[1]);
					ctx.stroke();

					ctx.beginPath();
					ctx.moveTo(pl[0], pl[1]);
					ctx.lineTo(pr[0], pr[1]);
					ctx.stroke();
				}

				return;
			}
		}

		// Render this patch.
		ctx.save();

		// Set clipping path.
		ctx.beginPath();
		ctx.moveTo(p1[0], p1[1]);
		ctx.lineTo(p2[0], p2[1]);
		ctx.lineTo(p4[0], p4[1]);
		ctx.lineTo(p3[0], p3[1]);
		ctx.closePath();
		//ctx.clip();

		// Get patch edge vectors.
		var d12 = [p2[0] - p1[0], p2[1] - p1[1]];
		var d24 = [p4[0] - p2[0], p4[1] - p2[1]];
		var d43 = [p3[0] - p4[0], p3[1] - p4[1]];
		var d31 = [p1[0] - p3[0], p1[1] - p3[1]];

		// Find the corner that encloses the most area
		var a1 = Math.abs(d12[0] * d31[1] - d12[1] * d31[0]);
		var a2 = Math.abs(d24[0] * d12[1] - d24[1] * d12[0]);
		var a4 = Math.abs(d43[0] * d24[1] - d43[1] * d24[0]);
		var a3 = Math.abs(d31[0] * d43[1] - d31[1] * d43[0]);
		var amax = Math.max(Math.max(a1, a2), Math.max(a3, a4));
		var dx = 0, dy = 0, padx = 0, pady = 0;

		// Align the transform along this corner.
		switch (amax) {
			case a1:
				ctx.transform(d12[0], d12[1], -d31[0], -d31[1], p1[0], p1[1]);
				// Calculate 1.05 pixel padding on vector basis.
				if (u4 != 1) padx = 1.05 / Math.sqrt(d12[0] * d12[0] + d12[1] * d12[1]);
				if (v4 != 1) pady = 1.05 / Math.sqrt(d31[0] * d31[0] + d31[1] * d31[1]);
				break;
			case a2:
				ctx.transform(d12[0], d12[1], d24[0], d24[1], p2[0], p2[1]);
				// Calculate 1.05 pixel padding on vector basis.
				if (u4 != 1) padx = 1.05 / Math.sqrt(d12[0] * d12[0] + d12[1] * d12[1]);
				if (v4 != 1) pady = 1.05 / Math.sqrt(d24[0] * d24[0] + d24[1] * d24[1]);
				dx = -1;
				break;
			case a4:
				ctx.transform(-d43[0], -d43[1], d24[0], d24[1], p4[0], p4[1]);
				// Calculate 1.05 pixel padding on vector basis.
				if (u4 != 1) padx = 1.05 / Math.sqrt(d43[0] * d43[0] + d43[1] * d43[1]);
				if (v4 != 1) pady = 1.05 / Math.sqrt(d24[0] * d24[0] + d24[1] * d24[1]);
				dx = -1;
				dy = -1;
				break;
			case a3:
				// Calculate 1.05 pixel padding on vector basis.
				ctx.transform(-d43[0], -d43[1], -d31[0], -d31[1], p3[0], p3[1]);
				if (u4 != 1) padx = 1.05 / Math.sqrt(d43[0] * d43[0] + d43[1] * d43[1]);
				if (v4 != 1) pady = 1.05 / Math.sqrt(d31[0] * d31[0] + d31[1] * d31[1]);
				dy = -1;
				break;
		}

		// Calculate image padding to match.
		var du = (u4 - u1);
		var dv = (v4 - v1);
		var padu = padx * du;
		var padv = pady * dv;

		ctx.drawImage(image, u1 * iw, v1 * ih, Math.min(u4 - u1 + padu, 1) * iw, Math.min(v4 - v1 + padv, 1) * ih, dx, dy, 1 + padx, 1 + pady);
		ctx.restore();
	}

	/**
	 * Calculate a projective transform that maps [0,1]x[0,1] onto the given set of points.
	 */
	function getProjectiveTransform(points) {
		var eqMatrix = new Matrix(9, 8, [
			[ 1, 1, 1, 0, 0, 0, -points[3][0], -points[3][0], -points[3][0] ],
			[ 0, 1, 1, 0, 0, 0, 0, -points[2][0], -points[2][0] ],
			[ 1, 0, 1, 0, 0, 0, -points[1][0], 0, -points[1][0] ],
			[ 0, 0, 1, 0, 0, 0, 0, 0, -points[0][0] ],

			[ 0, 0, 0, -1, -1, -1, points[3][1], points[3][1], points[3][1] ],
			[ 0, 0, 0, 0, -1, -1, 0, points[2][1], points[2][1] ],
			[ 0, 0, 0, -1, 0, -1, points[1][1], 0, points[1][1] ],
			[ 0, 0, 0, 0, 0, -1, 0, 0, points[0][1] ]

		]);

		var kernel = eqMatrix.rowEchelon().values;
		var transform = new Matrix(3, 3, [
			[-kernel[0][8], -kernel[1][8], -kernel[2][8]],
			[-kernel[3][8], -kernel[4][8], -kernel[5][8]],
			[-kernel[6][8], -kernel[7][8], 1]
		]);
		return transform;
	}

	// start
	function start() {
		switchVideo();
		switchImage();
	}
	start();

})();